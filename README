Главный файл для запуска игры new.py
Файл для захода в режим конструктора - create_level.py (нужно вызвать функцию, кнопки нет)

Hero - директория героя. Герой - управляемый игроком персонаж, каждый кадр обновляется с проверками 
коллизии около ближайших блоков, ловушек, врагов, может получать урон и умирать, имеет двойной прыжок, 
пределы скоростей и прыжка берутся из настроек. Имеет функцию анимации.

Trap - директория ловушек. Ловушки - объекты с особыми условиями обновления, могут наносить урон герою, 
перемещать его, увеличивать ему вертикальную или горизонтальную скорости, добавлять прыжок и т.д.. Имеют функцию анимации. 
Класс-предок - Trap из Trap.py, там прописаны аргументы, использующиеся во всех ловушках

JumpRefresher из JumpRefresher.py - добавляет доп. прыжок персонажу, если он истратил все прыжки

DartTrap из DartTrap.py - спавнит объект стрелы (исчезает после достижения границ экрана, 
соприкосновения с блоками, героем с нанесением урона) в указанном направлении с указанной частотой 
 
FallingPlatform из FallingPlatform.py - когда герой наступает, платформа проваливается через указанное время. 
Может перемещаться по указанной траектории и обратно после достижения длины траектории, перемещать персонажа с сохранением свойства падения

FireMaker из FireMaker.py - блок, спавнящий объект огня (статично наносящий урон и исчезающий после достижения периода)

Platform из Platform.py - Перемещается по заданной траектории и обратно после достижения длины траектории, может перемещать персонажа

Saw из Saw.py - пила, которая перемещается по заданной траектории и обратно после достижения длины траектории, наносит урон при соприкосновении с персонажем

Spike из Spike.py - шип, который статично наносит урон персонажу

SpikedBall из SpikedBall.py - шар с шипами, который перемещается по заданной траектории и обратно после достижение длины траектории,
при соприкосновении с персонажем наносит урон

Trampoline из Trampoline.py - батут, который при соприкосновении с персонажем устанавливает его скорость 
по вертикали или горизонтали в зависимости от направления батута равной скорости батута.



Blocks - директория блоков. 
Block из Block.py - главный класс
Не анимированы, отвечают только за коллизию с врагами, героем


Enemies - директория врагов. 
Enemy из Enemy.py - родительский класс
Враги - объекты с наличием собственного хп, анимацией, наносят урон при касании герою, если он не в неуязвимости и не прыгает на них, иначе умирают. Респавнятся при смерти героя.

AngryPig - свинья, ускоряется в 3 раза если видит героя (направление спрайта в сторону героя и герой в промежутке поля зрения по x и y), после удара об стенку или край линии блоков отдыхает

BlueBird - птица, летает с заданной длиной траектории в направлении полета и обратно

Bunny - кролик, действует как свинья, но вместо ускорения прыгает

Chicken - курица, если герой в заданном промежутке - бежит за ним, иначе стоит

Ghost - призрак, если герой в зоне триггера - каждый заданный промежуток времени устанавливает позицию, в сторону которой летит до наступления нового промежутка. Если герой не в зоне, отключается

Plant - цветок, стоит, спавнит направленную пулю, если герой в радиусе поражения. Пуля летит до столкновения с блоком или вылетом за экран

Skull - череп-босс, временно неуязвим, имеет 4 атаки, выбирающихся рандомно и еще одну атаку после достигания лимита по атакам в своем цикле, после которой становится уязвимым на некоторое время. После удара по нему снова становится неуязвимым с уже уменьшенным хп, улучшает уже имеющиеся атаки (повышает скорость, продолжительность, кол-во пуль), повышает число атак до последней. После 3 ударов делает предсмертную атаку и умирает.



Special - директория спец. объектов:
чекпоинтов, начала, конца. Выполняют функции сохранения прогресса, начала уровня и окончания уровня.

Checkpoint, Start, End


data - директория со всей медиа платформера (все спрайты, все звуки)


background.py - модуль, отвечающий за генерацию анимированного фона для экранов меню и настроек (из тайлов), а также за загрузку фона картинки фона в игру.

config_change.py - модуль, отвечающий за вызов экрана настроек (для изменения раскладки клавиатуры)

create_level.py - модуль, отвечающий за вызов экрана конструктора со всеми имеющимися на данный момент объектами для создания уровней, сохраняет их в текстовый файл. Пока не связан с меню.

menu.py - модуль, отвечающий за создание экрана меню с возможностью навигации в настройки, главную игру, выход из приложения

new.py - главный модуль, импортирует все объекты. Имеет функцию загрузки уровня из файла upload_level(level_name), функцию обновления после смерти персонажа upload_enemies(level_name), функцию, отвечающую за экран игры и игровой цикл main_game(), функцию, связывающую меню со всеми экранами start()

settings.py - все используемые константы, важные объекты хранятся здесь

useful_funcs.py - часто используемые функции по загрузке и обрезке изображений и т.д.

trap, enemy, special_sheet_cuts.txt - для обрезки анимированных спрайтов
key_bindings.txt - для установки и изменения раскладки клавиатуры
