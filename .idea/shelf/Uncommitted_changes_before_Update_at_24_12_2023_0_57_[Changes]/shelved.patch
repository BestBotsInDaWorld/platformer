Index: new.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sys\r\nimport pygame\r\nfrom useful_funcs import *\r\n\r\npygame.init()\r\n\r\nFPS = 60\r\nWIDTH = 800\r\nHEIGHT = 600\r\nGRAVITY = 0.25\r\nMAX_JUMP_HEIGHT = 80\r\nRESISTANCE = 0.25\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))  # экран\r\nclock = pygame.time.Clock()\r\n\r\nall_sprites = pygame.sprite.Group()\r\nhero_group = pygame.sprite.Group()\r\n\r\n\r\nclass Hero(pygame.sprite.Sprite):\r\n    def __init__(self, character, x, y):\r\n        super().__init__(hero_group, all_sprites)\r\n\r\n        path = rf\"Main Characters\\{character}\\\\\"\r\n\r\n        self.frames_forward = {\"Run\": self.cut_sheet(load_image(path + \"Run.png\"), 12, 1),\r\n                               \"Fall\": self.cut_sheet(load_image(path + \"Fall.png\"), 1, 1),\r\n                               \"Hit\": self.cut_sheet(load_image(path + \"Hit.png\"), 7, 1),\r\n                               \"Idle\": self.cut_sheet(load_image(path + \"Idle.png\"), 11, 1),\r\n                               \"Jump\": self.cut_sheet(load_image(path + \"Jump.png\"), 1, 1),\r\n                               \"Double Jump\": self.cut_sheet(load_image(path + \"Double Jump.png\"), 6, 1)}\r\n        self.frames_backwards = {key: [pygame.transform.flip(self.frames_forward[key][i], True, False)\r\n                                       for i in range(len(self.frames_forward[key]))]\r\n                                 for key in self.frames_forward.keys()}\r\n\r\n        self.action = \"Idle\"\r\n\r\n        self.direction = 'right'\r\n        self.dx = 0\r\n\r\n        self.dy = 0\r\n        self.jump_number = 0\r\n        self.jump_increase = 0\r\n        self.cur_jump_height = 0\r\n\r\n        self.cur_frame = 0\r\n        self.image = self.frames_forward[\"Run\"][self.cur_frame]\r\n        self.rect = self.rect.move(x, y)\r\n\r\n    def cut_sheet(self, sheet, columns, rows):\r\n        self.rect = pygame.Rect(0, 0, sheet.get_width() // columns, sheet.get_height() // rows)\r\n        cycle = []\r\n        for j in range(rows):\r\n            for i in range(columns):\r\n                frame_location = (self.rect.w * i, self.rect.h * j)\r\n                frame = sheet.subsurface(pygame.Rect(frame_location, self.rect.size))\r\n                frame.set_colorkey(frame.get_at((0, 0)))\r\n                cycle.append(frame)\r\n        return cycle\r\n\r\n\r\n    def set_image(self, direction, action):\r\n        if self.direction == 'right':\r\n            self.image = self.frames_forward[action][self.cur_frame]\r\n        else:\r\n            self.image = self.frames_backwards[action][self.cur_frame]\r\n\r\n\r\n    def update(self, *args):\r\n        scancode: pygame.key.ScancodeWrapper = args[0]\r\n\r\n        has_resistance = 1\r\n        has_gravity = 1\r\n\r\n        if scancode[pygame.K_DOWN]:\r\n            self.dy += 0.1\r\n\r\n        if scancode[pygame.K_UP]:\r\n            self.jump_number = max(1, self.jump_number)\r\n            if self.cur_jump_height != MAX_JUMP_HEIGHT and not (not self.jump_increase and self.cur_jump_height > 0):\r\n                self.jump_increase = True\r\n                self.dy = -5\r\n                self.cur_jump_height = min(float(MAX_JUMP_HEIGHT), self.cur_jump_height - self.dy)\r\n                has_gravity = False\r\n            elif not self.jump_increase:\r\n                if self.jump_number == 1:\r\n                    self.jump_number += 1\r\n                    self.cur_jump_height = 0\r\n        else:\r\n            self.jump_increase = False\r\n        if scancode[pygame.K_RIGHT]:\r\n            self.direction = 'right'\r\n            if not self.jump_number:\r\n                self.dx = min(5.0, self.dx + 0.1)\r\n            else:\r\n                self.dx = min(5.0, max(1.0, self.dx + 0.1))\r\n            if self.dx >= 0:\r\n                has_resistance = 0\r\n\r\n        if scancode[pygame.K_LEFT]:\r\n            self.direction = 'left'\r\n            if not self.jump_number:\r\n                self.dx = max(-5.0, self.dx - 0.1)\r\n            else:\r\n                self.dx = max(-5.0, min(-1.0, self.dx - 0.1))\r\n            if self.dx <= 0:\r\n                has_resistance = 0\r\n\r\n        if has_resistance and self.dy == 0:\r\n            if self.dx < 0:\r\n                self.dx = min(0.0, self.dx + RESISTANCE)\r\n            else:\r\n                self.dx = max(0.0, self.dx - RESISTANCE)\r\n\r\n        if has_gravity:\r\n            self.dy = min(5.0, self.dy + GRAVITY)\r\n\r\n        if self.rect.top == HEIGHT - self.rect.height:  # заменить на коллизию снизу\r\n            self.dy = min(self.dy, 0)\r\n            self.cur_jump_height = 0\r\n            self.jump_number = 0\r\n\r\n        if self.dy < 0:\r\n            if self.jump_number == 1:\r\n                self.action = \"Jump\"\r\n            else:\r\n                self.action = \"Double Jump\"\r\n        elif self.dy > 0:\r\n            self.action = \"Fall\"\r\n        elif self.dx != 0:\r\n            self.action = \"Run\"\r\n        else:\r\n            self.action = \"Idle\"\r\n\r\n        self.cur_frame = (self.cur_frame + 1) % len(self.frames_forward[self.action])\r\n        self.set_image(self.direction, self.action)\r\n        self.rect = self.rect.move(self.dx, self.dy)\r\n        self.rect.top = min(HEIGHT - self.rect.height, self.rect.top)\r\n\r\n\r\ndragon = Hero(\"Mask Dude\", 50, 50)\r\n\r\nrunning = True\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    intro_text = [\"ЗАСТАВКА\", \"\",\r\n                  \"Правила игры\",\r\n                  \"Если в правилах несколько строк,\",\r\n                  \"приходится выводить их построчно\"]\r\n\r\n    fon = pygame.transform.scale(load_image('fon.jpg'), (WIDTH, HEIGHT))  # фон с размерами окна\r\n    screen.blit(fon, (0, 0))\r\n    font = pygame.font.Font(None, 30)\r\n    text_coord = 50\r\n    for line in intro_text:\r\n        string_rendered = font.render(line, 1, pygame.Color('black'))  # текст, ..., цвет текста\r\n        intro_rect = string_rendered.get_rect()  # прямоугольник для строки\r\n        text_coord += 10\r\n        intro_rect.y = text_coord\r\n        intro_rect.x = 10\r\n        text_coord += intro_rect.height\r\n        screen.blit(string_rendered, intro_rect)\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN or \\\r\n                    event.type == pygame.MOUSEBUTTONDOWN:\r\n                return  # начинаем игру\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\n\r\nwhile running:\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n    screen.fill(pygame.Color(\"orange\"))\r\n    hero_group.update(pygame.key.get_pressed())\r\n    all_sprites.draw(screen)\r\n    pygame.display.flip()\r\n\r\n    clock.tick(FPS)\r\n\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/new.py b/new.py
--- a/new.py	(revision 5e7211a15b5c855eb0f53245ab5d59a7872c7782)
+++ b/new.py	(date 1703316232801)
@@ -16,6 +16,31 @@
 
 all_sprites = pygame.sprite.Group()
 hero_group = pygame.sprite.Group()
+blocks_group = pygame.sprite.Group()
+decoration_group = pygame.sprite.Group()
+
+block_names = ([f"{name} Big" for name in ["Autumn", "Fantasy", "Grass", "Jade", "Stone", "Wood"]] +
+               [f"{name} Small" for name in ["Autumn", "Fantasy", "Grass", "Jade", "Stone", "Wood"]])
+block_images = {key: load_image(rf"Terrain\Square Blocks\{key}.png") for key in block_names}
+
+
+def block_cut(self, sheet, columns, rows):
+    self.rect = pygame.Rect(0, 0, sheet.get_width() // columns, sheet.get_height() // rows)
+    cycle = []
+    for j in range(rows):
+        for i in range(columns):
+            frame_location = (self.rect.w * i, self.rect.h * j)
+            frame = sheet.subsurface(pygame.Rect(frame_location, self.rect.size))
+            frame.set_colorkey(frame.get_at((0, 0)))
+            cycle.append(frame)
+    return cycle
+
+
+class Block(pygame.sprite.Sprite):
+    def __init__(self, block_name, pos_x, pos_y):
+        super().__init__(blocks_group, all_sprites)
+        self.image = block_images[block_name]  # строка с названием
+        self.rect = self.image.get_rect().move(pos_x, pos_y)  # получаем левый топ коорд холста и получаем передвинутый
 
 
 class Hero(pygame.sprite.Sprite):
@@ -43,6 +68,7 @@
         self.jump_number = 0
         self.jump_increase = 0
         self.cur_jump_height = 0
+        self.on_ground = True
 
         self.cur_frame = 0
         self.image = self.frames_forward["Run"][self.cur_frame]
@@ -59,14 +85,12 @@
                 cycle.append(frame)
         return cycle
 
-
-    def set_image(self, direction, action):
+    def set_image(self, action):
         if self.direction == 'right':
             self.image = self.frames_forward[action][self.cur_frame]
         else:
             self.image = self.frames_backwards[action][self.cur_frame]
 
-
     def update(self, *args):
         scancode: pygame.key.ScancodeWrapper = args[0]
 
@@ -134,13 +158,27 @@
             self.action = "Idle"
 
         self.cur_frame = (self.cur_frame + 1) % len(self.frames_forward[self.action])
-        self.set_image(self.direction, self.action)
+        self.set_image(self.action)
         self.rect = self.rect.move(self.dx, self.dy)
+
+        for i in range(2):
+            for block in blocks_group:
+                if self.rect.colliderect(block.rect):
+                    if self.dx < 0:
+                        block_x = block.rect.right
+                    else:
+                        block_x = block.rect.left
+                    if self.dy < 0:
+                        block_y = block.rect.top
+                    else:
+                        block_y = block.rect.bottom
+
         self.rect.top = min(HEIGHT - self.rect.height, self.rect.top)
 
 
-dragon = Hero("Mask Dude", 50, 50)
+dragon = Hero("Mask Dude", 100, 100)
 
+block = Block("Wood Small", 500, 100)
 running = True
 
 
Index: copyfrom/data/map.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/copyfrom/data/map.txt b/copyfrom/data/map.txt
new file mode 100644
--- /dev/null	(date 1702619840000)
+++ b/copyfrom/data/map.txt	(date 1702619840000)
@@ -0,0 +1,11 @@
+...###
+..##.#.####
+.##..###..#
+##........#
+#...@..#..#
+###..###..#
+..#..#....#
+.##.##.#.##
+.#......##
+.#.....##
+.#######
\ No newline at end of file
Index: copyfrom/camera.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport os\r\nimport sys\r\n\r\nSIZE = WIDTH, HEIGHT = 400, 400\r\nFPS = 60\r\nclock = pygame.time.Clock()\r\npygame.init()\r\npygame.display.set_caption(f'Balls, fps:{60}')\r\nscreen = pygame.display.set_mode(SIZE)\r\ntiles_group = pygame.sprite.Group()\r\nall_sprites = pygame.sprite.Group()\r\nplayer_group = pygame.sprite.Group()\r\nplayer = None\r\n\r\n\r\ndef load_image(name, colorkey=None):\r\n    fullname = os.path.join('data', name)  # по директории дата\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        terminate()\r\n    image = pygame.image.load(fullname)\r\n    if colorkey is not None:\r\n        image = image.convert()\r\n        if colorkey == -1:\r\n            colorkey = image.get_at((0, 0))\r\n        image.set_colorkey(colorkey)\r\n    else:\r\n        image = image.convert_alpha()\r\n    return image\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    intro_text = [\"ЗАСТАВКА\", \"\",\r\n                  \"Правила игры\",\r\n                  \"Если в правилах несколько строк,\",\r\n                  \"приходится выводить их построчно\"]\r\n\r\n    fon = pygame.transform.scale(load_image('fon.jpg'), (WIDTH, HEIGHT))  # фон с размерами окна\r\n    screen.blit(fon, (0, 0))\r\n    font = pygame.font.Font(None, 30)\r\n    text_coord = 50\r\n    for line in intro_text:\r\n        string_rendered = font.render(line, 1, pygame.Color('black'))  # текст, ..., цвет текста\r\n        intro_rect = string_rendered.get_rect()  # прямоугольник для строки\r\n        text_coord += 10\r\n        intro_rect.y = text_coord\r\n        intro_rect.x = 10\r\n        text_coord += intro_rect.height\r\n        screen.blit(string_rendered, intro_rect)\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN or \\\r\n                    event.type == pygame.MOUSEBUTTONDOWN:\r\n                return  # начинаем игру\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\n\r\ndef load_level(filename):\r\n    filename = \"data/\" + filename\r\n    if not os.path.exists(filename) or filename[len(filename) - 3:] != \"txt\":\r\n        print(f\"Файл '{filename}' не найден\")\r\n        terminate()\r\n    # читаем уровень, убирая символы перевода строки\r\n    with open(filename, 'r') as mapFile:\r\n        level_map = [line.strip() for line in mapFile]\r\n\r\n    # и подсчитываем максимальную длину\r\n    max_width = max(map(len, level_map))\r\n\r\n    # дополняем каждую строку пустыми клетками ('.')\r\n    return list(map(lambda x: x.ljust(max_width, '.'), level_map))\r\n\r\n\r\ndef generate_level(level):\r\n    new_player, x, y = None, None, None\r\n    for y in range(len(level)):\r\n        for x in range(len(level[y])):\r\n            if level[y][x] == '.':\r\n                Tile('empty', x, y)\r\n            elif level[y][x] == '#':\r\n                Tile('wall', x, y)\r\n            elif level[y][x] == '@':\r\n                Tile('empty', x, y)\r\n                new_player = Player(x, y)\r\n    # вернем игрока, а также размер поля в клетках\r\n    return new_player, x, y\r\n\r\n\r\ntile_images = {\r\n    'wall': load_image('box.png'),  # сразу пригрузить холст чтобы не загружать потом\r\n    'empty': load_image('grass.png')\r\n}\r\n\r\nplayer_image = load_image('mario.png')\r\n\r\ntile_width = tile_height = 50\r\n\r\n\r\nclass Tile(pygame.sprite.Sprite):\r\n    def __init__(self, tile_type, pos_x, pos_y):\r\n        super().__init__(tiles_group, all_sprites)\r\n        self.image = tile_images[tile_type]  # строка с названием\r\n        self.rect = self.image.get_rect().move(\r\n            tile_width * pos_x, tile_height * pos_y)  # получаем левый топ коорд холста и получаем передвинутый\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(player_group, all_sprites)\r\n        self.pos_x = pos_x\r\n        self.pos_y = pos_y\r\n        self.image = player_image\r\n        self.rect = self.image.get_rect().move(\r\n            tile_width * pos_x + 15, tile_height * pos_y + 5)\r\n\r\n    def update(self, key, *args):\r\n        if key == pygame.K_DOWN:\r\n            if self.pos_y + 1 < len(level) and level[self.pos_y + 1][self.pos_x] != '#':\r\n                self.pos_y += 1\r\n                self.rect = self.rect.move(0, tile_width)\r\n        if key == pygame.K_UP:\r\n            if self.pos_y - 1 >= 0 and level[self.pos_y - 1][self.pos_x] != '#':\r\n                self.pos_y -= 1\r\n                self.rect = self.rect.move(0, -tile_width)\r\n        if key == pygame.K_LEFT:\r\n            if self.pos_x - 1 >= 0 and level[self.pos_y][self.pos_x - 1] != '#':\r\n                self.pos_x -= 1\r\n                self.rect = self.rect.move(-tile_width, 0)\r\n        if key == pygame.K_RIGHT:\r\n            if self.pos_x + 1 < max(map(len, level)) and level[self.pos_y][self.pos_x + 1] != '#':\r\n                self.pos_x += 1\r\n                self.rect = self.rect.move(tile_width, 0)\r\n\r\n\r\nclass Camera:\r\n    # зададим начальный сдвиг камеры\r\n    def __init__(self):\r\n        self.dx = 0\r\n        self.dy = 0\r\n\r\n    # сдвинуть объект obj на смещение камеры\r\n    def apply(self, obj):\r\n        obj.rect.x += self.dx\r\n        obj.rect.y += self.dy\r\n\r\n    # позиционировать камеру на объекте target\r\n    def update(self, target):\r\n        self.dx = -(target.rect.x + target.rect.w // 2 - WIDTH // 2)\r\n        self.dy = -(target.rect.y + target.rect.h // 2 - HEIGHT // 2)\r\n\r\n\r\nif __name__ == '__main__':\r\n    level = load_level('map.txt')\r\n    start_screen()\r\n    camera = Camera()\r\n    player, level_x, level_y = generate_level(level)\r\n    camera.update(player)\r\n    for sprite in all_sprites:\r\n        camera.apply(sprite)\r\n    while True:\r\n        screen.fill('white')\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEWHEEL:\r\n                FPS = min(120, max(1, FPS + int(event.precise_y)))\r\n                pygame.display.set_caption(f'Balls, fps:{FPS}')\r\n            if event.type == pygame.KEYDOWN:\r\n                all_sprites.update(event.key)\r\n                camera.update(player)\r\n                for sprite in all_sprites:\r\n                    camera.apply(sprite)\r\n        all_sprites.draw(screen)\r\n        player_group.draw(screen)\r\n        clock.tick(FPS)\r\n        pygame.display.flip()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/copyfrom/camera.py b/copyfrom/camera.py
--- a/copyfrom/camera.py	(revision 5e7211a15b5c855eb0f53245ab5d59a7872c7782)
+++ b/copyfrom/camera.py	(date 1703311097713)
@@ -155,6 +155,7 @@
 
     # позиционировать камеру на объекте target
     def update(self, target):
+        print(self.dx, self.dy)
         self.dx = -(target.rect.x + target.rect.w // 2 - WIDTH // 2)
         self.dy = -(target.rect.y + target.rect.h // 2 - HEIGHT // 2)
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"db432080-e122-48bf-876e-ff341894dc7c\" name=\"Changes\" comment=\"new\">\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/data/desktop.ini\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/data/dragon_sheet8x2.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/data/star.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/data/arrow.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/data/bomb.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/data/boom.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/data/creature.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/data/error.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/copyfrom/hero_moving/surface.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/new.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZqdIk3IHhkBgMLOZnvZ4U7yMdG\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.a.executor\": \"Run\",\r\n    \"Python.dragon.executor\": \"Run\",\r\n    \"Python.new.executor\": \"Run\",\r\n    \"Python.particles.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"C:/pythonprojects/platformer/data/Main Characters/Mask Dude\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\pythonprojects\\platformer\\data\\Main Characters\\Mask Dude\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\\copyfrom\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\\data\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\pythonprojects\\platformer\\data\\Background\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\\data\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\" />\r\n      <recent name=\"C:\\pythonprojects\\platformer\\data\\Main Characters\\Virtual Guy\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-7a29c1521ef0-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.298\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"db432080-e122-48bf-876e-ff341894dc7c\" name=\"Changes\" comment=\"\" />\r\n      <created>1703153465728</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1703153465728</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"new\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703153490128</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703153490128</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"new\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"new\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/useful_funcs.py</url>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5e7211a15b5c855eb0f53245ab5d59a7872c7782)
+++ b/.idea/workspace.xml	(date 1703311556103)
@@ -5,18 +5,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="db432080-e122-48bf-876e-ff341894dc7c" name="Changes" comment="new">
-      <change afterPath="$PROJECT_DIR$/copyfrom/data/desktop.ini" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/data/dragon_sheet8x2.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/data/star.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/data/arrow.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/data/bomb.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/data/boom.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/data/creature.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/data/error.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/copyfrom/hero_moving/surface.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/new.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/copyfrom/data/box.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/copyfrom/data/fon.jpg" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/copyfrom/data/grass.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/copyfrom/data/map.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/copyfrom/data/mario.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/copyfrom/camera.py" beforeDir="false" afterPath="$PROJECT_DIR$/copyfrom/camera.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/new.py" beforeDir="false" afterPath="$PROJECT_DIR$/new.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -32,6 +28,10 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 0
@@ -45,18 +45,20 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "Python.a.executor": "Run",
+    "Python.camera.executor": "Run",
     "Python.dragon.executor": "Run",
     "Python.new.executor": "Run",
     "Python.particles.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "git-widget-placeholder": "master",
-    "last_opened_file_path": "C:/pythonprojects/platformer/data/Main Characters/Mask Dude",
+    "last_opened_file_path": "C:/pythonprojects/platformer/copyfrom/data",
     "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
   }
 }]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\pythonprojects\platformer\copyfrom\data" />
       <recent name="C:\pythonprojects\platformer\data\Main Characters\Mask Dude" />
       <recent name="C:\pythonprojects\platformer\copyfrom" />
       <recent name="C:\pythonprojects\platformer" />
@@ -93,21 +95,27 @@
       <option name="project" value="LOCAL" />
       <updated>1703153490128</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="new">
+      <option name="closed" value="true" />
+      <created>1703302088153</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1703302088153</updated>
+    </task>
+    <task id="LOCAL-00003" summary="new">
+      <option name="closed" value="true" />
+      <created>1703302129502</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1703302129502</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="new" />
     <option name="LAST_COMMIT_MESSAGE" value="new" />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/useful_funcs.py</url>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
